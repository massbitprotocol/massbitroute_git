#!/bin/bash
TYPE="git"
SITE_ROOT=$(realpath $(dirname $(realpath $0))/..)
mkdir -p $SITE_ROOT
export HOME=$SITE_ROOT

ROOT_DIR=$SITE_ROOT
source $SITE_ROOT/scripts/base.sh

cd $SITE_ROOT

git="git -C $SITE_ROOT"
diff="diff -s"

mbr_root=/massbit/massbitroute/app
service_dir=$mbr_root/src/sites/services
ROOT_DIR=$SITE_ROOT
VARS=$ROOT_DIR/vars
env_dir=$SITE_ROOT/data/env
_init() {

	if [ -z "$MBR_ENV" ]; then
		echo "MBR_ENV missing"
		exit 1
	fi
	_git_config

	export MKAGENT_BRANCH=${MKAGENT_BRANCH:-$MBR_ENV}
	REPOS="\
  $service_dir/mkagent|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_mkagent.git|$MKAGENT_BRANCH \
"
}

_docker_build() {
	docker-compose -f install/mbr/docker-compose.yml build $@
}
_docker_up() {
	docker-compose -f install/mbr/docker-compose.yml up $@
}

_reload() {
	pkill -f push.py
	$SITE_ROOT/cmd_server _update
	$SITE_ROOT/cmd_server update
	$SITE_ROOT/cmd_server start all

	#	$cmd update
}
_prepare() {
	echo "Prepare"
	mkdir -p $SITE_ROOT/logs/nginx $SITE_ROOT/db $SITE_ROOT/tmp $SITE_ROOT/db $SITE_ROOT/vars

}

_supervisor() {
	ln -sf /massbit/massbitroute/app/gbc /massbit/massbitroute/app/src/gbc
	ln -sf /massbit/massbitroute/app/gbc/bin/openresty /usr/local/openresty
	# apt-get update
	# apt-get install -y git apache2-utils supervisor jq python-is-python2 libssl-dev libmaxminddb-dev fcgiwrap cron
	if [ -f "/usr/bin/systemctl" ]; then
		systemctl enable supervisor
		systemctl start supervisor
	fi

	mkdir -p /etc/supervisor/conf.d
	cp supervisor.conf /etc/supervisor/conf.d/${TYPE}.conf
	if [ "$MBR_MODE" != "docker" ]; then
		supervisorctl update
	fi
}

_install_repos() {

	_init

	for _pathgit in $REPOS; do
		_repo
		_path=$(echo $_pathgit | cut -d'|' -f1)
		_url=$(echo $_pathgit | cut -d'|' -f2)
		_branch=$(echo $_pathgit | cut -d'|' -f3)
		_git_clone $_url $_path $_branch
	done
}
_install_one() {
	_prepare
	# _install_repos
}

_install() {
	_install_one
	_supervisor
}

loop() {
	while true; do
		timeout 60 $0 $@
		sleep 3
	done
}

_update_repos() {
	_init
	_update_sources $REPOS
	_st_repo=$?
	return $_st_repo
}

_passwd() {
	pass=$(
		tr </dev/urandom -dc _A-Z-a-z-0-9 | head -c${1:-32}
		echo
	)
	echo $pass
}

_repo_add_file() {
	_name=$1
	_repo_name="${_name}.git"
	if [ -f "$ROOT_DIR/data/repo/massbitroute/$_repo_name/HEAD" ]; then return; fi
	mkdir -p $ROOT_DIR/data/repo/massbitroute/$_repo_name
	git -C $ROOT_DIR/data/repo/massbitroute/$_repo_name --bare init
	git -C $ROOT_DIR/data/repo/massbitroute/$_repo_name update-server-info
	chown -R www-data.www-data $ROOT_DIR/data/repo/massbitroute/$_repo_name
	chmod -R 777 $ROOT_DIR/data/repo/massbitroute/$_repo_name
}
_vars_to_env() {
	cd $SITE_ROOT

	ls vars | grep ^SESSION_ | while read f; do echo export $f=\'$(cat vars/$f)\'; done >$env_dir/session.env
	ls vars | grep ^MONITOR_ | while read f; do echo export $f=\'$(cat vars/$f)\'; done >$env_dir/monitor.env
	ls vars | grep ^NODE_ | while read f; do echo export $f=\'$(cat vars/$f)\'; done >$env_dir/node.env
	ls vars | grep ^GATEWAY_ | while read f; do echo export $f=\'$(cat vars/$f)\'; done >$env_dir/gateway.env
	ls vars | grep ^STAT_ | while read f; do echo export $f=\'$(cat vars/$f)\'; done >$env_dir/stat.env
	ls vars | grep ^GIT_ | while read f; do echo export $f=\'$(cat vars/$f)\'; done >$env_dir/git.env
	ls vars | grep ^API_ | while read f; do echo export $f=\'$(cat vars/$f)\'; done >$env/api.env
	echo "Git enviroment"
	# cat $SITE_ROOT/env/git.env
	cat $env_dir/*.env >$env_dir/env.sh
	awk -F'=' -v q1="'" -v q2='"' 'BEGIN{cfg="return {\n"}
		{
		        sub(/^export\s*/,"",$1);
	        gsub(/ /,"",$1);

	        if(length($2) == 0)
		        cfg=cfg"[\""$1"\"]""=\""$2"\",\n";
		else {
		        val_1=substr($2,0,1);
		        if(val_1 == q1 || val_1 == q2)
		        cfg=cfg"[\""$1"\"]""="$2",\n";
		        else
		        cfg=cfg"[\""$1"\"]""=\""$2"\",\n";
		}

		}
		END{print cfg"}"}' $env_dir/env.sh >$env_dir/env.lua
	mkdir -p $SITE_ROOT/src
	cp $env_dir/env.lua $SITE_ROOT/src/env.lua
}

_repo_add() {
	_repo=$1
	_repo_add_file $_repo
	_repo_case=GIT_${_repo^^}_WRITE
	if [ ! -f "$VARS/$_repo_case" ]; then
		_pass=$(_passwd)
		htpasswd -bc "$ROOT_DIR/data/${_repo}_write.htpasswd" "$_repo" "$_pass"
		htpasswd -bc "$ROOT_DIR/data/${_repo}.htpasswd" "$_repo" "$_pass"
		htpasswd -b "$ROOT_DIR/data/${_repo}.htpasswd" $(cat $VARS/GIT_PRIVATE_READ | sed 's/:/ /g')
		echo "${_repo}:${_pass}" >$VARS/$_repo_case
	fi
	_vars_to_env

}
_add_host() {
	_host=$1
	_ip=$2
	grep "$_host" /etc/hosts >/dev/null
	if [ $? -ne 0 ]; then
		echo "$_ip $_host" >>/etc/hosts
	fi
}

_service_fcgiwrap() {
	while true; do
		pgrep -f /usr/sbin/fcgiwrap
		if [ $? -ne 0 ]; then
			/etc/init.d/fcgiwrap start
		fi
		sleep 3
	done

}
_repo_gwmandeploy() {
	_dir=$1
	mkdir -p $_dir
	cd $_dir
	mkdir -p zones
	touch zones/.gitkeep
	for _d in monitors.d failover.d weighted.d multivalue.d datacenter.d geolocation.d/maps.d geolocation.d/resources.d; do
		__dir=conf.d/$_d
		mkdir -p $__dir
		touch $__dir/_default
	done

	_f=conf.d/datacenter.d/_generic
	if [ ! -f "$_f" ]; then
		cat >$_f <<EOF
  generic-datacenter => {
        datacenters => [ Ha-Noi HCM ],
        dcmap => {
                    Ha-Noi => [
                        127.0.0.1
                    ]
                    HCM => [
		      127.0.0.1
                    ]
                }
      }
EOF
	fi
	_f=conf.d/geolocation.d/resources.d/_generic
	if [ ! -f "$_f" ]; then
		cat >$_f <<EOF
 generic-resource => {
                map => generic-map
                dcmap => {
                    Ha-Noi => [
		    127.0.0.1
                    ]
                    HCM => [
		    127.0.0.1	
                    ]
                }
            }
EOF
	fi

	_f=conf.d/geolocation.d/maps.d/_generic
	if [ ! -f "$_f" ]; then
		cat >$_f <<EOF
generic-map => {
                nets => nets.VN
                geoip2_db => GeoIP2-City.mmdb
                datacenters => [Ha-Noi HCM]
                map => {
                    # Use ISO 3166-2 official names
                    AS => {
                        VN => {
                            00 => [Ha-Noi HCM]    # Không xác định
                        }
                        default => [Ha-Noi HCM]   # Các nước Asian
                    }
                    default => [Ha-Noi HCM]       # Các châu lục khác
                }
            }
EOF
	fi

	_f=conf.d/monitors.d/_gateway
	if [ ! -f "$_f" ]; then
		cat >$_f <<EOF
 gateway_check => {
    plugin => tcp_connect,
    port => 443,
    up_thresh => 20,
    ok_thresh => 10,
    down_thresh => 10,
    interval => 10,
    timeout => 3,
  }
EOF
	fi
	#cd $SITE_ROOT
}

_update_repo_branch() {

	_name1=$1

	_dir=$SITE_ROOT/data/${_name1}

	case $_name1 in
	gwmandeploy)
		_repo_gwmandeploy $_dir
		;;
	esac
	_name=${_name1^^}

	#	git init
	mkdir -p $_dir
	cd $_dir

	if [ ! -d ".git" ]; then git init; fi
	_account=$(cat $SITE_ROOT/vars/GIT_${_name}_WRITE)
	GIT_PRIVATE_DOMAIN=$(cat $VARS/GIT_PRIVATE_DOMAIN)
	GIT_PRIVATE_BRANCH=$(cat $VARS/GIT_PRIVATE_BRANCH)
	git remote add origin http://$_account@$GIT_PRIVATE_DOMAIN/massbitroute/${_name1}.git
	git checkout -b $GIT_PRIVATE_BRANCH
	git pull origin $GIT_PRIVATE_BRANCH
	touch Readme.md
	git add .
	git commit -m "Add env"
	git push -u origin $GIT_PRIVATE_BRANCH
}
_repo_create_default() {
	if [ -z "$GIT_PRIVATE_BRANCH" ]; then
		echo "Miss GIT_PRIVATE_BRANCH"
		exit 1
	else
		echo $GIT_PRIVATE_BRANCH >$VARS/GIT_PRIVATE_BRANCH
	fi
	for _r in env ssl gwmandeploy apideploy statdeploy monitordeploy nodedeploy gatewaydeploy; do
		echo _repo_add $_r
		_repo_add $_r
		echo _update_repo_branch $_r
		_update_repo_branch $_r
	done
}
_repo_init() {
	_git_config

	mkdir -p $env_dir

	if [ -z "$DOMAIN" ]; then
		echo "environment DOMAIN missing"
		exit 1
	fi

	echo "export DOMAIN=$DOMAIN" >$env_dir/base.env

	if [ ! -f "$VARS/SESSION_DOMAIN_SSL" ]; then
		echo "#listen 443 ssl;ssl_certificate /etc/letsencrypt/live/mbr.$DOMAIN/fullchain.pem;ssl_certificate_key /etc/letsencrypt/live/mbr.$DOMAIN/privkey.pem;" >$VARS/SESSION_DOMAIN_SSL
	fi
	if [ ! -f "$VARS/MONITOR_SCHEME" ]; then
		echo "http" >$VARS/MONITOR_SCHEME
	fi

	if [ ! -f "$VARS/NODE_DOMAIN_SSL" ]; then
		echo "#listen 443 ssl;ssl_certificate /etc/letsencrypt/live/node.mbr.$DOMAIN/fullchain.pem;ssl_certificate_key /etc/letsencrypt/live/node.mbr.$DOMAIN/privkey.pem;" >$VARS/NODE_DOMAIN_SSL
	fi
	if [ ! -f "$VARS/GATEWAY_DOMAIN_SSL" ]; then
		echo "#listen 443 ssl;ssl_certificate /etc/letsencrypt/live/gw.mbr.$DOMAIN/fullchain.pem;ssl_certificate_key /etc/letsencrypt/live/gw.mbr.$DOMAIN/privkey.pem;" >$VARS/GATEWAY_DOMAIN_SSL
	fi

	if [ ! -f "$VARS/API_DOMAIN_SSL" ]; then
		echo "#listen 443 ssl;ssl_certificate /etc/letsencrypt/live/$DOMAIN/fullchain.pem;ssl_certificate_key /etc/letsencrypt/live/$DOMAIN/privkey.pem;" >$VARS/API_DOMAIN_SSL
	fi

	if [ ! -f "$VARS/STAT_DOMAIN_SSL" ]; then
		echo "#listen 443 ssl;ssl_certificate /etc/letsencrypt/live/stat.mbr.$DOMAIN/fullchain.pem;ssl_certificate_key /etc/letsencrypt/live/stat.mbr.$DOMAIN/privkey.pem;" >$VARS/STAT_DOMAIN_SSL

	fi
	if [ ! -f "$VARS/STAT_PROMETHEUS_SCHEME" ]; then
		echo "http" >$VARS/STAT_PROMETHEUS_SCHEME
	fi

	if [ ! -f "$VARS/GIT_PRIVATE_DOMAIN" ]; then
		export GIT_PRIVATE_DOMAIN=${GIT_PRIVATE_DOMAIN:-git.$DOMAIN}
		echo "$GIT_PRIVATE_DOMAIN" >$VARS/GIT_PRIVATE_DOMAIN
	fi

	if [ ! -f "$VARS/API_INTERNAL_IP_ALLOW" ]; then
		echo "allow 127.0.0.1;deny all;" >$VARS/API_INTERNAL_IP_ALLOW
	fi

	if [ ! -f "$VARS/GIT_PUBLIC_URL" ]; then
		echo "https://github.com" >$VARS/GIT_PUBLIC_URL
	fi

	if [ ! -f "$VARS/GIT_PRIVATE_READ" ]; then
		GIT_PRIVATE_READ=massbit:$(_passwd)
		echo "$GIT_PRIVATE_READ" >$VARS/GIT_PRIVATE_READ
	else
		GIT_PRIVATE_READ=$(cat $VARS/GIT_PRIVATE_READ)
	fi
	if [ ! -f "$VARS/GIT_PRIVATE_READ_URL" ]; then
		echo "http://$GIT_PRIVATE_READ@$GIT_PRIVATE_DOMAIN" >$VARS/GIT_PRIVATE_READ_URL
	fi

	_vars_to_env
	_repo_create_default

}

_repo_clear() {

	for _r in env ssl gwmandeploy apideploy mkagentdeploy; do
		echo rm -rf $SITE_ROOT/data/$_r
		rm -rf $SITE_ROOT/data/$_r
		echo rm -rf $SITE_ROOT/data/repo/massbitroute/${_r}.git

		rm -rf $SITE_ROOT/data/repo/massbitroute/${_r}.git
	done
	echo rm $SITE_ROOT/vars/GIT_*
	rm $SITE_ROOT/vars/GIT_*
}

_update_tag() {
	PORTAL_DOMAIN=portal.$DOMAIN
	git="git -C $SITE_ROOT"
	_v=$($git config --get remote.origin.url | awk -F'/' '{print $NF}')
	tmp=$(mktemp)
	curl -sfkL http://$PORTAL_DOMAIN/deploy/info/version/$_v >$tmp
	if [ $? -ne 0 ]; then
		rm $tmp
		return 0
	fi

	_tag=$(cat $tmp)

	rm $tmp

	_my_tag=$($git describe --tags)
	_tag_update=0
	if [ "$_tag" != "$_my_tag" ]; then
		$git fetch --all --tags --prune
		$git checkout $_tag
		_tag_update=1
	fi

	return $_tag_update

}

_update() {
	echo "Update"
	# _repo_init

	$SITE_ROOT/scripts/cert.sh _renew

	# _repo_create_default

	# _update_repos
	_st_update=$?

	_update_tag
	if [ $_st_update -eq 0 ]; then
		_st_update=$?
	fi

	return $_st_update

}

_monitor() {

	_update

	is_reload=$?

	if [ $is_reload -ne 0 ]; then
		$0 _reload
	fi

}

_run() {
	rm -rf $SITE_ROOT/tmp/*
	_update
	$SITE_ROOT/start_server
}
$@
