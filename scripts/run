#!/bin/bash
TYPE="git"
SITE_ROOT=$(realpath $(dirname $(realpath $0))/..)
mkdir -p $SITE_ROOT

export HOME=$SITE_ROOT
export GIT_PUBLIC_URL="https://github.com"

source $SITE_ROOT/scripts/base.sh

cd $SITE_ROOT

git="git -C $SITE_ROOT"
diff="diff -s"
type="git"
cmd="/massbit/massbitroute/app/src/sites/services/$type/cmd_server"
nginx="$cmd nginx"

mbr_root=/massbit/massbitroute/app
service_dir=$mbr_root/src/sites/services
ROOT_DIR=$SITE_ROOT
VARS=$ROOT_DIR/vars

if [ -n "$DOMAIN" ]; then
	GIT_PRIVATE_DOMAIN=git.$DOMAIN
else
	echo "$DOMAIN not define"
	exit 1
fi
_repo() {
	if [ -e "$SITE_ROOT/cmd_server" ]; then bash $SITE_ROOT/cmd_server _env; fi
	if [ -f "$SITE_ROOT/.env_raw" ]; then source $SITE_ROOT/.env_raw; fi
	export MBR_ENV=${MBR_ENV:-dev}
	export MBRAPP_BRANCH=${MBRAPP_BRANCH:-$MBR_ENV}
	export ASDF_BRANCH=${ASDF_BRANCH:-$MBR_ENV}
	export GBC_BRANCH=${GBC_BRANCH:-$MBR_DEV}
	export SSL_BRANCH=${SSL_BRANCH:-$MBR_ENV}
	export GWMAN_BRANCH=${GWMAN_BRANCH:-$MBR_ENV}
	export NODE_BRANCH=${NODE_BRANCH:-$MBR_ENV}
	export GATEWAY_BRANCH=${GATEWAY_BRANCH:-$MBR_ENV}
	export STAT_BRANCH=${STAT_BRANCH:-$MBR_ENV}
	export MONITOR_BRANCH=${MONITOR_BRANCH:-$MBR_ENV}
	export MONITORDEPLOY_BRANCH=${MONITORDEPLOY_BRANCH:-$MBR_ENV}
	export API_BRANCH=${API_BRANCH:-$MBR_ENV}
	export SESSION_BRANCH=${SESSION_BRANCH:-$MBR_ENV}
	export GIT_BRANCH=${GIT_BRANCH:-$MBR_DEV}
	export MKAGENT_BRANCH=${MKAGENT_BRANCH:-$MBR_ENV}
	REPOS="\
 $mbr_root/gbc|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_gbc|$GBC_BRANCH \
  $service_dir/git|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_git.git|$GIT_BRANCH \
  $service_dir/mkagent|$GIT_PUBLIC_URL/massbitprotocol/massbitroute_mkagent.git|$MKAGENT_BRANCH \
"
}
_repo
# if [ -e "$SITE_ROOT/cmd_server" ]; then bash $SITE_ROOT/cmd_server _env; fi
# if [ -f "$SITE_ROOT/.env_raw" ]; then source $SITE_ROOT/.env_raw; fi

# $SITE_ROOT/env|$GIT_PRIVATE_READ_URL/massbitroute/env.git|$MBR_ENV \
# /etc/letsencrypt|$GIT_PRIVATE_READ_URL/massbitroute/ssl.git|$SSL_BRANCH \

# _repo

_reload() {
	$SITE_ROOT/etc/mkagent/agents/push.sh _kill
	$cmd _update
	#	$cmd update
}
_prepare() {
	echo "Prepare"
	mkdir -p $SITE_ROOT/logs/nginx $SITE_ROOT/db $SITE_ROOT/tmp $SITE_ROOT/db $SITE_ROOT/vars
	echo mbr-git >$SITE_ROOT/vars/TYPE
	# rm -rf $SITE_ROOT/tmp/*

}
_init() {
	# if [ -z "$GIT_PRIVATE_READ_URL" ]; then
	# 	echo "Need GIT_PRIVATE_READ_URL"
	# 	exit 1
	# fi
	# if [ ! -f "$SITE_ROOT/.env" ]; then
	cat <<EOF >$SITE_ROOT/.env
export GIT_PUBLIC_URL="https://github.com"
export MBR_ENV=$MBR_ENV
EOF
	# fi

	source $SITE_ROOT/.env
	_repo
	_git_clone $GIT_PRIVATE_READ_URL/massbitroute/env.git $SITE_ROOT/env $MBR_ENV
	_git_clone $GIT_PUBLIC_URL/massbitprotocol/massbitroute_gbc.git /massbit/massbitroute/app/gbc
	# if [ -e "$SITE_ROOT/cmd_server" ]; then bash $SITE_ROOT/cmd_server _env; fi
	# if [ -f "$SITE_ROOT/.env_raw" ]; then source $SITE_ROOT/.env_raw; fi

	_repo
	# bash $SITE_ROOT/cmd_server _env
	# source $SITE_ROOT/.env_raw

}

_supervisor() {
	ln -sf /massbit/massbitroute/app/gbc /massbit/massbitroute/app/src/gbc
	ln -sf /massbit/massbitroute/app/gbc/bin/openresty /usr/local/openresty
	# apt-get update
	# apt-get install -y git apache2-utils supervisor jq python-is-python2 libssl-dev libmaxminddb-dev fcgiwrap cron
	if [ -f "/usr/bin/systemctl" ]; then
		systemctl enable supervisor
		systemctl start supervisor
	fi

	mkdir -p /etc/supervisor/conf.d
	cp supervisor.conf /etc/supervisor/conf.d/${TYPE}.conf
	if [ "$MBR_MODE" != "docker" ]; then
		supervisorctl update
	fi
}

_install_repos() {
	_git_config

	echo $REPOS
	for _pathgit in $REPOS; do
		_repo
		_path=$(echo $_pathgit | cut -d'|' -f1)
		_url=$(echo $_pathgit | cut -d'|' -f2)
		_branch=$(echo $_pathgit | cut -d'|' -f3)
		_git_clone $_url $_path $_branch
	done
}
_install_one() {
	_repo
	_init
	_prepare
	_install_repos
}

_install() {
	_install_one
	_supervisor
}

loop() {
	while true; do
		timeout 60 $0 $@
		sleep 3
	done
}

_update_repos() {
	_git_config
	_repo
	_update_sources $REPOS
	_st_repo=$?
	return $_st_repo
}

_passwd() {
	pass=$(
		tr </dev/urandom -dc _A-Z-a-z-0-9 | head -c${1:-32}
		echo
	)
	echo $pass
}

_repo_add_file() {
	_name=$1
	_repo_name="${_name}.git"
	if [ -f "$ROOT_DIR/data/repo/massbitroute/$_repo_name/HEAD" ]; then return; fi
	mkdir -p $ROOT_DIR/data/repo/massbitroute/$_repo_name
	git -C $ROOT_DIR/data/repo/massbitroute/$_repo_name --bare init
	git -C $ROOT_DIR/data/repo/massbitroute/$_repo_name update-server-info
	chown -R www-data.www-data $ROOT_DIR/data/repo/massbitroute/$_repo_name
	chmod -R 777 $ROOT_DIR/data/repo/massbitroute/$_repo_name
}
_vars_to_env() {
	cd $SITE_ROOT
	ls vars | grep ^GIT_ | while read f; do echo export $f=\'$(cat vars/$f)\'; done >$SITE_ROOT/env/git.env
}
_repo_add() {
	_repo=$1
	_repo_add_file $_repo
	_repo_case=GIT_${_repo^^}_WRITE
	if [ ! -f "$VARS/$_repo_case" ]; then
		_pass=$(_passwd)
		htpasswd -bc "$ROOT_DIR/data/${_repo}_write.htpasswd" "$_repo" "$_pass"
		htpasswd -bc "$ROOT_DIR/data/${_repo}.htpasswd" "$_repo" "$_pass"
		htpasswd -b "$ROOT_DIR/data/${_repo}.htpasswd" $(cat $VARS/GIT_PRIVATE_READ | sed 's/:/ /g')
		echo "${_repo}:${_pass}" >$VARS/$_repo_case
	fi
	_vars_to_env

}
_add_host() {
	_host=$1
	_ip=$2
	grep "$_host" /etc/hosts >/dev/null
	if [ $? -ne 0 ]; then
		echo "$_ip $_host" >>/etc/hosts
	fi
}

_repo_gwmandeploy() {
	_dir=$1

	cd $_dir
	mkdir -p zones
	touch zones/.gitkeep
	for _d in monitors.d failover.d weighted.d multivalue.d datacenter.d geolocation.d/maps.d geolocation.d/resources.d; do
		_dir=conf.d/$_d
		mkdir -p $_dir
		touch $_dir/_default
	done

	_f=conf.d/datacenter.d/_generic
	if [ ! -f "$_f" ]; then
		cat >$_f <<EOF
  generic-datacenter => {
        datacenters => [ Ha-Noi HCM ],
        dcmap => {
                    Ha-Noi => [
                        127.0.0.1
                    ]
                    HCM => [
		      127.0.0.1
                    ]
                }
      }
EOF
	fi
	_f=conf.d/geolocation.d/resources.d/_generic
	if [ ! -f "$_f" ]; then
		cat >$_f <<EOF
 generic-resource => {
                map => generic-map
                dcmap => {
                    Ha-Noi => [
		    127.0.0.1
                    ]
                    HCM => [
		    127.0.0.1	
                    ]
                }
            }
EOF
	fi

	_f=conf.d/geolocation.d/maps.d/_generic
	if [ ! -f "$_f" ]; then
		cat >$_f <<EOF
generic-map => {
                nets => nets.VN
                geoip2_db => GeoIP2-City.mmdb
                datacenters => [Ha-Noi HCM]
                map => {
                    # Use ISO 3166-2 official names
                    AS => {
                        VN => {
                            00 => [Ha-Noi HCM]    # Không xác định
                        }
                        default => [Ha-Noi HCM]   # Các nước Asian
                    }
                    default => [Ha-Noi HCM]       # Các châu lục khác
                }
            }
EOF
	fi

	_f=conf.d/monitors.d/_gateway
	if [ ! -f "$_f" ]; then
		cat >$_f <<EOF
 gateway_check => {
    plugin => tcp_connect,
    port => 443,
    up_thresh => 20,
    ok_thresh => 10,
    down_thresh => 10,
    interval => 10,
    timeout => 3,
  }
EOF
	fi
	# if [ ! -f "zones/${DOMAIN}" ]; then
	#
	#	sed "s/_DOMAIN_/${DOMAIN}/g" $_dir/etc/zone.tpl >$_dir/data/zones/${DOMAIN} # fi	# fi

	# 	if [ ! -f "$_dir/zones/${DOMAIN}" ]; then
	# 		cp $_dir/data/zones/${DOMAIN} $_dir/zones/${DOMAIN}
	# 	fi
	# 	if [ ! -f "$_dir/config" ]; then
	# 		cat $_dir/config <<EOF
	# options => {
	#     run_dir = $SITE_ROOT/run
	#     state_dir = $SITE_ROOT/run
	#     tcp_threads => 1
	#     udp_threads => 1
	#     edns_client_subnet => true
	#     zones_default_ttl => 3600
	#     listen => [127.0.0.1]
	#     dns_port = 5300
	# }

	# service_types => {
	#     $include{data/conf.d/monitors.d/*}
	# }

	# plugins => {
	#     simplefo => {
	#         $include{data/conf.d/failover.d/*}
	#     }
	#     weighted => {
	#             $include{data/conf.d/weighted.d/*}
	#     }
	#     multifo => {
	#             $include{data/conf.d/multivalue.d/*}
	#     }

	#     metafo => {
	#         resources => {
	#             $include{data/conf.d/datacenter.d/*}
	#         }
	#     }
	#     geoip =>  {
	#             maps => {
	#                 $include{data/conf.d/geolocation.d/maps.d/*}
	#             }
	#             resources => {
	#                 $include{data/conf.d/geolocation.d/resources.d/*}
	#             }
	#     }
	# }
	# EOF
	# 	fi
	cd $SITE_ROOT
}

_update_repo_branch() {
	_name1=$1

	case $_name1 in
	gwmandeploy)
		_repo_gwmandeploy $SITE_ROOT/${_name1}
		;;
	esac

	_name=${_name1^^}
	mkdir -p $SITE_ROOT/${_name1}
	cd $SITE_ROOT/${_name1}
	if [ ! -d ".git" ]; then git init; fi
	_account=$(cat $SITE_ROOT/vars/GIT_${_name}_WRITE)
	GIT_PRIVATE_DOMAIN=$(cat $VARS/GIT_PRIVATE_DOMAIN)
	git remote add origin http://$_account@$GIT_PRIVATE_DOMAIN/massbitroute/${_name1}.git
	git checkout -b $MBR_ENV
	git pull origin $MBR_ENV
	touch Readme.md
	git add .
	git commit -m "Add env"
	git push -u origin $MBR_ENV
}
_repo_create_default() {
	for _r in env ssl gwmandeploy apideploy statdeploy monitordeploy nodedeploy gatewaydeploy; do
		_repo_add $_r
		_update_repo_branch $_r
	done
}
_repo_init() {
	_git_config
	mkdir -p $ROOT_DIR/data $ROOT_DIR/env
	ip=$(curl http://ipv4.canhazip.com)
	# GIT_PRIVATE_DOMAIN=git.$DOMAIN
	_add_host $GIT_PRIVATE_DOMAIN $ip

	if [ ! -f "$VARS/GIT_PRIVATE_DOMAIN" ]; then
		echo "$GIT_PRIVATE_DOMAIN" >$VARS/GIT_PRIVATE_DOMAIN
	else
		GIT_PRIVATE_DOMAIN=$(cat $VARS/GIT_PRIVATE_DOMAIN)
	fi

	if [ ! -f "$VARS/GIT_PRIVATE_IP" ]; then
		echo "$ip" >$VARS/GIT_PRIVATE_IP
	else
		GIT_PRIVATE_IP=$(cat $VARS/GIT_PRIVATE_IP)
	fi

	if [ ! -f "$VARS/GIT_PRIVATE_READ" ]; then
		GIT_PRIVATE_READ=massbit:$(_passwd)
		echo "$GIT_PRIVATE_READ" >$VARS/GIT_PRIVATE_READ
	else
		GIT_PRIVATE_READ=$(cat $VARS/GIT_PRIVATE_READ)
	fi
	if [ ! -f "$VARS/GIT_PRIVATE_READ_URL" ]; then
		echo "http://$GIT_PRIVATE_READ@$GIT_PRIVATE_DOMAIN" >$VARS/GIT_PRIVATE_READ_URL
	fi

	_vars_to_env
	_repo_create_default

}

_repo_clear() {
	for _r in env ssl gwmandeploy apideploy statdeploy monitordeploy; do
		rm -rf $SITE_ROOT/$_r
		rm -rf $SITE_ROOT/data/repo/massbitroute/${_r}.git
	done
	rm $SITE_ROOT/vars/GIT_*
}

_run() {
	rm -rf $SITE_ROOT/tmp/*
	$SITE_ROOT/start_server
}

_update() {
	echo "Update"

	if [ ! -f "$SITE_ROOT/.env" ]; then
		cat <<EOF >$SITE_ROOT/.env
export GIT_PUBLIC_URL="https://github.com"
export MBR_ENV=$MBR_ENV
EOF
	fi

	_repo_create_default

	_update_repos
	_st_update=$?

	return $_st_update

}

_monitor() {

	_update

	is_reload=$?

	if [ $is_reload -ne 0 ]; then
		$0 _reload
	fi

}

$@
